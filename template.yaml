AWSTemplateFormatVersion: "2010-09-09"
Description: 2-Tier Architecture with Web and DB Instances

Parameters:
  KeyName:
    Description: "Key pair name for SSH access"
    Type: "AWS::EC2::KeyPair::KeyName"
  WebInstanceType:
    Description: "EC2 instance type for Web Server"
    Type: "String"
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
      - "t2.small"
      - "t2.medium"
    ConstraintDescription: "Must be a valid EC2 instance type."
  DBInstanceType:
    Description: "EC2 instance type for Database Server"
    Type: "String"
    Default: "t2.micro"
    AllowedValues:
      - "t2.micro"
      - "t2.small"
      - "t2.medium"
    ConstraintDescription: "Must be a valid EC2 instance type."
  WebServerAMI:
    Description: "AMI ID for Web Server"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  DBServerAMI:
    Description: "AMI ID for Database Server"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Resources:
  # VPC Definition
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "2-Tier-VPC"

  # Public Subnet
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: "Name"
          Value: "PublicSubnet"

  # Private Subnet
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: "Name"
          Value: "PrivateSubnet"

  # Internet Gateway and Attachment
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateway and Elastic IP
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet

  # Route Tables and Associations
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  WebServerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP and SSH access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  DBServerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow MySQL access from Web Server"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSG

  # Web Server Instance
  WebServerInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref WebServerSG
      ImageId: !Ref WebServerAMI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Welcome to the Web Server</h1>" > /var/www/html/index.html

  # DB Server Instance
  DBServerInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref DBInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref DBServerSG
      ImageId: !Ref DBServerAMI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y mariadb-server
          systemctl start mariadb
          systemctl enable mariadb
          mysql -e "CREATE DATABASE myapp;"
          mysql -e "CREATE USER 'myuser'@'%' IDENTIFIED BY 'mypassword';"
          mysql -e "GRANT ALL PRIVILEGES ON myapp.* TO 'myuser'@'%';"
          mysql -e "FLUSH PRIVILEGES;"

Outputs:
  WebServerPublicIP:
    Description: "Public IP of the Web Server"
    Value: !GetAtt WebServerInstance.PublicIp

  DatabasePrivateIP:
    Description: "Private IP of the Database Server"
    Value: !GetAtt DBServerInstance.PrivateIp
